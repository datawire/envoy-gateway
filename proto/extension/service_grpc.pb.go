// Copyright Envoy Gateway Authors
// SPDX-License-Identifier: Apache-2.0
// The full text of the Apache license is available in the LICENSE file at
// the root of the repo.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/extension/service.proto

package extension

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnvoyGatewayExtensionClient is the client API for EnvoyGatewayExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvoyGatewayExtensionClient interface {
	// PostRouteModify allows an extension to modify Routes before they are finalized
	// PostRouteModify will only be executed after each Route is generated by Envoy Gateway
	// if the HTTPRoute/GRPCRoute that created the Route used resources introduced by the extension as
	// filters and so long as the extension has provided config in the EnvoyGateway resource to opt-into this Hook
	PostRouteModify(ctx context.Context, in *PostRouteModifyRequest, opts ...grpc.CallOption) (*PostRouteModifyResponse, error)
	// PostVirtualHostModify allows an extension to modify VirtualHosts before they are finalized
	// PostVirtualHostModify will always be executed after each VirtualHost is generated by Envoy Gateway
	// so long as the extension has provided config in the EnvoyGateway resource to opt-into this Hook
	PostVirtualHostModify(ctx context.Context, in *PostVirtualHostModifyRequest, opts ...grpc.CallOption) (*PostVirtualHostModifyResponse, error)
	// PostHTTPListenerModify allows an extension to modify Listeners before they are finalized
	// PostHTTPListenerModify will always be executed after each Listener is generated by Envoy Gateway
	// so long as the extension has provided config in the EnvoyGateway resource to opt-into this Hook
	PostHTTPListenerModify(ctx context.Context, in *PostHTTPListenerModifyRequest, opts ...grpc.CallOption) (*PostHTTPListenerModifyResponse, error)
	// PostTranslateInsert allows an extension to inject additional clusters and/or secrets to the xDS config
	// PostTranslateInsert will always be executed after Envoy Gateway has generated an xDS config
	// so long as the extension has provided config in the EnvoyGateway resource to opt-into this Hook
	PostTranslateInsert(ctx context.Context, in *PostTranslationInsertRequest, opts ...grpc.CallOption) (*PostTranslationInsertResponse, error)
}

type envoyGatewayExtensionClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvoyGatewayExtensionClient(cc grpc.ClientConnInterface) EnvoyGatewayExtensionClient {
	return &envoyGatewayExtensionClient{cc}
}

func (c *envoyGatewayExtensionClient) PostRouteModify(ctx context.Context, in *PostRouteModifyRequest, opts ...grpc.CallOption) (*PostRouteModifyResponse, error) {
	out := new(PostRouteModifyResponse)
	err := c.cc.Invoke(ctx, "/envoygateway.extension.EnvoyGatewayExtension/PostRouteModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyGatewayExtensionClient) PostVirtualHostModify(ctx context.Context, in *PostVirtualHostModifyRequest, opts ...grpc.CallOption) (*PostVirtualHostModifyResponse, error) {
	out := new(PostVirtualHostModifyResponse)
	err := c.cc.Invoke(ctx, "/envoygateway.extension.EnvoyGatewayExtension/PostVirtualHostModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyGatewayExtensionClient) PostHTTPListenerModify(ctx context.Context, in *PostHTTPListenerModifyRequest, opts ...grpc.CallOption) (*PostHTTPListenerModifyResponse, error) {
	out := new(PostHTTPListenerModifyResponse)
	err := c.cc.Invoke(ctx, "/envoygateway.extension.EnvoyGatewayExtension/PostHTTPListenerModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envoyGatewayExtensionClient) PostTranslateInsert(ctx context.Context, in *PostTranslationInsertRequest, opts ...grpc.CallOption) (*PostTranslationInsertResponse, error) {
	out := new(PostTranslationInsertResponse)
	err := c.cc.Invoke(ctx, "/envoygateway.extension.EnvoyGatewayExtension/PostTranslateInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvoyGatewayExtensionServer is the server API for EnvoyGatewayExtension service.
// All implementations must embed UnimplementedEnvoyGatewayExtensionServer
// for forward compatibility
type EnvoyGatewayExtensionServer interface {
	// PostRouteModify allows an extension to modify Routes before they are finalized
	// PostRouteModify will only be executed after each Route is generated by Envoy Gateway
	// if the HTTPRoute/GRPCRoute that created the Route used resources introduced by the extension as
	// filters and so long as the extension has provided config in the EnvoyGateway resource to opt-into this Hook
	PostRouteModify(context.Context, *PostRouteModifyRequest) (*PostRouteModifyResponse, error)
	// PostVirtualHostModify allows an extension to modify VirtualHosts before they are finalized
	// PostVirtualHostModify will always be executed after each VirtualHost is generated by Envoy Gateway
	// so long as the extension has provided config in the EnvoyGateway resource to opt-into this Hook
	PostVirtualHostModify(context.Context, *PostVirtualHostModifyRequest) (*PostVirtualHostModifyResponse, error)
	// PostHTTPListenerModify allows an extension to modify Listeners before they are finalized
	// PostHTTPListenerModify will always be executed after each Listener is generated by Envoy Gateway
	// so long as the extension has provided config in the EnvoyGateway resource to opt-into this Hook
	PostHTTPListenerModify(context.Context, *PostHTTPListenerModifyRequest) (*PostHTTPListenerModifyResponse, error)
	// PostTranslateInsert allows an extension to inject additional clusters and/or secrets to the xDS config
	// PostTranslateInsert will always be executed after Envoy Gateway has generated an xDS config
	// so long as the extension has provided config in the EnvoyGateway resource to opt-into this Hook
	PostTranslateInsert(context.Context, *PostTranslationInsertRequest) (*PostTranslationInsertResponse, error)
	mustEmbedUnimplementedEnvoyGatewayExtensionServer()
}

// UnimplementedEnvoyGatewayExtensionServer must be embedded to have forward compatible implementations.
type UnimplementedEnvoyGatewayExtensionServer struct {
}

func (UnimplementedEnvoyGatewayExtensionServer) PostRouteModify(context.Context, *PostRouteModifyRequest) (*PostRouteModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRouteModify not implemented")
}
func (UnimplementedEnvoyGatewayExtensionServer) PostVirtualHostModify(context.Context, *PostVirtualHostModifyRequest) (*PostVirtualHostModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostVirtualHostModify not implemented")
}
func (UnimplementedEnvoyGatewayExtensionServer) PostHTTPListenerModify(context.Context, *PostHTTPListenerModifyRequest) (*PostHTTPListenerModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostHTTPListenerModify not implemented")
}
func (UnimplementedEnvoyGatewayExtensionServer) PostTranslateInsert(context.Context, *PostTranslationInsertRequest) (*PostTranslationInsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTranslateInsert not implemented")
}
func (UnimplementedEnvoyGatewayExtensionServer) mustEmbedUnimplementedEnvoyGatewayExtensionServer() {}

// UnsafeEnvoyGatewayExtensionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvoyGatewayExtensionServer will
// result in compilation errors.
type UnsafeEnvoyGatewayExtensionServer interface {
	mustEmbedUnimplementedEnvoyGatewayExtensionServer()
}

func RegisterEnvoyGatewayExtensionServer(s grpc.ServiceRegistrar, srv EnvoyGatewayExtensionServer) {
	s.RegisterService(&EnvoyGatewayExtension_ServiceDesc, srv)
}

func _EnvoyGatewayExtension_PostRouteModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRouteModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyGatewayExtensionServer).PostRouteModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoygateway.extension.EnvoyGatewayExtension/PostRouteModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyGatewayExtensionServer).PostRouteModify(ctx, req.(*PostRouteModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyGatewayExtension_PostVirtualHostModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostVirtualHostModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyGatewayExtensionServer).PostVirtualHostModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoygateway.extension.EnvoyGatewayExtension/PostVirtualHostModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyGatewayExtensionServer).PostVirtualHostModify(ctx, req.(*PostVirtualHostModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyGatewayExtension_PostHTTPListenerModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostHTTPListenerModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyGatewayExtensionServer).PostHTTPListenerModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoygateway.extension.EnvoyGatewayExtension/PostHTTPListenerModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyGatewayExtensionServer).PostHTTPListenerModify(ctx, req.(*PostHTTPListenerModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvoyGatewayExtension_PostTranslateInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTranslationInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvoyGatewayExtensionServer).PostTranslateInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoygateway.extension.EnvoyGatewayExtension/PostTranslateInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvoyGatewayExtensionServer).PostTranslateInsert(ctx, req.(*PostTranslationInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvoyGatewayExtension_ServiceDesc is the grpc.ServiceDesc for EnvoyGatewayExtension service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvoyGatewayExtension_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "envoygateway.extension.EnvoyGatewayExtension",
	HandlerType: (*EnvoyGatewayExtensionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostRouteModify",
			Handler:    _EnvoyGatewayExtension_PostRouteModify_Handler,
		},
		{
			MethodName: "PostVirtualHostModify",
			Handler:    _EnvoyGatewayExtension_PostVirtualHostModify_Handler,
		},
		{
			MethodName: "PostHTTPListenerModify",
			Handler:    _EnvoyGatewayExtension_PostHTTPListenerModify_Handler,
		},
		{
			MethodName: "PostTranslateInsert",
			Handler:    _EnvoyGatewayExtension_PostTranslateInsert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/extension/service.proto",
}
