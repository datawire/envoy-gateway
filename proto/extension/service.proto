// Copyright Envoy Gateway Authors
// SPDX-License-Identifier: Apache-2.0
// The full text of the Apache license is available in the LICENSE file at
// the root of the repo.

syntax = "proto3";

package envoygateway.extension;

import "envoy/config/cluster/v3/cluster.proto";
import "envoy/config/listener/v3/listener.proto";
import "envoy/config/route/v3/route_components.proto";
import "envoy/extensions/transport_sockets/tls/v3/secret.proto";

import "proto/extension/context.proto";

option go_package = "proto/extension";


service EnvoyGatewayExtension {
    // PostRouteModify allows an extension to modify Routes before they are finalized
    // PostRouteModify will only be executed after each Route is generated by Envoy Gateway
    // if the HTTPRoute/GRPCRoute that created the Route used resources introduced by the extension as
    // filters and so long as the extension has provided config in the EnvoyGateway resource to opt-into this Hook
    rpc PostRouteModify (PostRouteModifyRequest) returns (PostRouteModifyResponse) {};

    // PostVirtualHostModify allows an extension to modify VirtualHosts before they are finalized
    // PostVirtualHostModify will always be executed after each VirtualHost is generated by Envoy Gateway
    // so long as the extension has provided config in the EnvoyGateway resource to opt-into this Hook
    rpc PostVirtualHostModify(PostVirtualHostModifyRequest) returns (PostVirtualHostModifyResponse) {};

    // PostHTTPListenerModify allows an extension to modify Listeners before they are finalized
    // PostHTTPListenerModify will always be executed after each Listener is generated by Envoy Gateway
    // so long as the extension has provided config in the EnvoyGateway resource to opt-into this Hook
    rpc PostHTTPListenerModify(PostHTTPListenerModifyRequest) returns (PostHTTPListenerModifyResponse) {};

    // PostTranslateInsert allows an extension to inject additional clusters and/or secrets to the xDS config
    // PostTranslateInsert will always be executed after Envoy Gateway has generated an xDS config
    // so long as the extension has provided config in the EnvoyGateway resource to opt-into this Hook
    rpc PostTranslateInsert(PostTranslationInsertRequest) returns (PostTranslationInsertResponse) {};
}

// PostRouteModifyRequest sends a Route that was generated by Envoy Gateway along with context information to an extension so that the Route can be modified
message PostRouteModifyRequest {
    envoy.config.route.v3.Route route = 1;
    PostRouteExtensionContext route_context = 2;
}


// PostRouteModifyResponse is the expected response from an extension and contains a modified version of the Route that was sent
// An extension may choose to return a nil Route to cause Envoy Gateway to discard it
message PostRouteModifyResponse {
    envoy.config.route.v3.Route route = 1;
}


// PostVirtualHostModifyRequest sends a VirtualHost that was generated by Envoy Gateway along with context information to an extension so that the VirtualHost can be modified
message PostVirtualHostModifyRequest {
    envoy.config.route.v3.VirtualHost virtual_host = 1;
    PostVirtualHostExtensionContext virtual_host_context = 2;
}

// PostVirtualHostModifyResponse is the expected response from an extension and contains a modified version of the VirtualHost that was sent
// An extension may choose to return a nil VirtualHost to cause Envoy Gateway to discard it
message PostVirtualHostModifyResponse {
    envoy.config.route.v3.VirtualHost virtual_host = 1;
}

// PostVirtualHostModifyRequest sends a Listener that was generated by Envoy Gateway along with context information to an extension so that the Listener can be modified
message PostHTTPListenerModifyRequest {
    envoy.config.listener.v3.Listener listener = 1;
    PostHTTPListenerExtensionContext listener_context = 2;
}


// PostHTTPListenerModifyResponse is the expected response from an extension and contains a modified version of the Listener that was sent
// An extension may choose to return a nil Listener to cause Envoy Gateway to discard it
message PostHTTPListenerModifyResponse {
    envoy.config.listener.v3.Listener listener = 1;
}


// PostTranslationInsertRequest currently sends only context to an extension
message PostTranslationInsertRequest {
    PostXDSInsertExtensionContext insert_context = 1;
}


// PostTranslationInsertResponse is the expected response from an extension and contains a list of clusters and secrets to be injected into the xDS config
message PostTranslationInsertResponse {
    repeated envoy.config.cluster.v3.Cluster clusters = 1;
    repeated envoy.extensions.transport_sockets.tls.v3.Secret secrets = 2;
}
